// Generated from AbfahrtLexer.g4 by ANTLR 4.13.2

package org.example.aufgabe1;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class AbfahrtLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		TIME=1, VEHICLE=2, VEHICLENUMBER=3, TO=4, DAYS=5, EXCEPT=6, DAY=7, MONTH=8, 
		SEPERATOR=9, TARGET=10, WS=11;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"TIME", "VEHICLE", "VEHICLENUMBER", "TO", "DAYS", "EXCEPT", "DAY", "MONTH", 
			"SEPERATOR", "TARGET", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, "'nach'", null, "'nicht'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "TIME", "VEHICLE", "VEHICLENUMBER", "TO", "DAYS", "EXCEPT", "DAY", 
			"MONTH", "SEPERATOR", "TARGET", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public AbfahrtLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "AbfahrtLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u000b\u00aa\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0003\u0000\u001c\b\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0003"+
		"\u0001*\b\u0001\u0001\u0002\u0004\u0002-\b\u0002\u000b\u0002\f\u0002."+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0003\u0004D\b\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004X\b\u0004\u0003\u0004"+
		"Z\b\u0004\u0001\u0004\u0003\u0004]\b\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004f\b"+
		"\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0006\u0003\u0006o\b\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0003\u0007\u0098\b\u0007\u0001\u0007\u0003\u0007\u009b\b\u0007"+
		"\u0001\b\u0001\b\u0001\t\u0004\t\u00a0\b\t\u000b\t\f\t\u00a1\u0001\n\u0004"+
		"\n\u00a5\b\n\u000b\n\f\n\u00a6\u0001\n\u0001\n\u0000\u0000\u000b\u0001"+
		"\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007"+
		"\u000f\b\u0011\t\u0013\n\u0015\u000b\u0001\u0000\b\u0001\u000001\u0001"+
		"\u000009\u0001\u000022\u0001\u000005\u0001\u000003\u0002\u0000,,;;\f\u0000"+
		"(),,//AZaz\u00c4\u00c4\u00d6\u00d6\u00dc\u00dc\u00df\u00df\u00e4\u00e4"+
		"\u00f6\u00f6\u00fc\u00fc\u0003\u0000\t\n\r\r  \u00cb\u0000\u0001\u0001"+
		"\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001"+
		"\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000"+
		"\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000"+
		"\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000"+
		"\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000"+
		"\u0000\u0001\u001b\u0001\u0000\u0000\u0000\u0003)\u0001\u0000\u0000\u0000"+
		"\u0005,\u0001\u0000\u0000\u0000\u00070\u0001\u0000\u0000\u0000\te\u0001"+
		"\u0000\u0000\u0000\u000bg\u0001\u0000\u0000\u0000\rn\u0001\u0000\u0000"+
		"\u0000\u000f\u0097\u0001\u0000\u0000\u0000\u0011\u009c\u0001\u0000\u0000"+
		"\u0000\u0013\u009f\u0001\u0000\u0000\u0000\u0015\u00a4\u0001\u0000\u0000"+
		"\u0000\u0017\u0018\u0007\u0000\u0000\u0000\u0018\u001c\u0007\u0001\u0000"+
		"\u0000\u0019\u001a\u0007\u0002\u0000\u0000\u001a\u001c\u0007\u0001\u0000"+
		"\u0000\u001b\u0017\u0001\u0000\u0000\u0000\u001b\u0019\u0001\u0000\u0000"+
		"\u0000\u001c\u001d\u0001\u0000\u0000\u0000\u001d\u001e\u0005:\u0000\u0000"+
		"\u001e\u001f\u0007\u0003\u0000\u0000\u001f \u0007\u0001\u0000\u0000 \u0002"+
		"\u0001\u0000\u0000\u0000!\"\u0005B\u0000\u0000\"#\u0005u\u0000\u0000#"+
		"*\u0005s\u0000\u0000$%\u0005R\u0000\u0000%*\u0005E\u0000\u0000&\'\u0005"+
		"K\u0000\u0000\'(\u0005A\u0000\u0000(*\u0005T\u0000\u0000)!\u0001\u0000"+
		"\u0000\u0000)$\u0001\u0000\u0000\u0000)&\u0001\u0000\u0000\u0000*\u0004"+
		"\u0001\u0000\u0000\u0000+-\u0007\u0001\u0000\u0000,+\u0001\u0000\u0000"+
		"\u0000-.\u0001\u0000\u0000\u0000.,\u0001\u0000\u0000\u0000./\u0001\u0000"+
		"\u0000\u0000/\u0006\u0001\u0000\u0000\u000001\u0005n\u0000\u000012\u0005"+
		"a\u0000\u000023\u0005c\u0000\u000034\u0005h\u0000\u00004\b\u0001\u0000"+
		"\u0000\u000056\u0005M\u0000\u00006D\u0005o\u0000\u000078\u0005D\u0000"+
		"\u00008D\u0005i\u0000\u00009:\u0005M\u0000\u0000:D\u0005i\u0000\u0000"+
		";<\u0005D\u0000\u0000<D\u0005o\u0000\u0000=>\u0005F\u0000\u0000>D\u0005"+
		"r\u0000\u0000?@\u0005S\u0000\u0000@D\u0005a\u0000\u0000AB\u0005S\u0000"+
		"\u0000BD\u0005o\u0000\u0000C5\u0001\u0000\u0000\u0000C7\u0001\u0000\u0000"+
		"\u0000C9\u0001\u0000\u0000\u0000C;\u0001\u0000\u0000\u0000C=\u0001\u0000"+
		"\u0000\u0000C?\u0001\u0000\u0000\u0000CA\u0001\u0000\u0000\u0000DY\u0001"+
		"\u0000\u0000\u0000EF\u0005 \u0000\u0000FG\u0005-\u0000\u0000GH\u0005 "+
		"\u0000\u0000HW\u0001\u0000\u0000\u0000IJ\u0005M\u0000\u0000JX\u0005o\u0000"+
		"\u0000KL\u0005D\u0000\u0000LX\u0005i\u0000\u0000MN\u0005M\u0000\u0000"+
		"NX\u0005i\u0000\u0000OP\u0005D\u0000\u0000PX\u0005o\u0000\u0000QR\u0005"+
		"F\u0000\u0000RX\u0005r\u0000\u0000ST\u0005S\u0000\u0000TX\u0005a\u0000"+
		"\u0000UV\u0005S\u0000\u0000VX\u0005o\u0000\u0000WI\u0001\u0000\u0000\u0000"+
		"WK\u0001\u0000\u0000\u0000WM\u0001\u0000\u0000\u0000WO\u0001\u0000\u0000"+
		"\u0000WQ\u0001\u0000\u0000\u0000WS\u0001\u0000\u0000\u0000WU\u0001\u0000"+
		"\u0000\u0000XZ\u0001\u0000\u0000\u0000YE\u0001\u0000\u0000\u0000YZ\u0001"+
		"\u0000\u0000\u0000Z\\\u0001\u0000\u0000\u0000[]\u0005,\u0000\u0000\\["+
		"\u0001\u0000\u0000\u0000\\]\u0001\u0000\u0000\u0000]f\u0001\u0000\u0000"+
		"\u0000^_\u0005t\u0000\u0000_`\u0005\u00e4\u0000\u0000`a\u0005g\u0000\u0000"+
		"ab\u0005l\u0000\u0000bc\u0005i\u0000\u0000cd\u0005c\u0000\u0000df\u0005"+
		"h\u0000\u0000eC\u0001\u0000\u0000\u0000e^\u0001\u0000\u0000\u0000f\n\u0001"+
		"\u0000\u0000\u0000gh\u0005n\u0000\u0000hi\u0005i\u0000\u0000ij\u0005c"+
		"\u0000\u0000jk\u0005h\u0000\u0000kl\u0005t\u0000\u0000l\f\u0001\u0000"+
		"\u0000\u0000mo\u0007\u0004\u0000\u0000nm\u0001\u0000\u0000\u0000no\u0001"+
		"\u0000\u0000\u0000op\u0001\u0000\u0000\u0000pq\u0007\u0001\u0000\u0000"+
		"qr\u0005.\u0000\u0000r\u000e\u0001\u0000\u0000\u0000st\u0005J\u0000\u0000"+
		"tu\u0005a\u0000\u0000u\u0098\u0005n\u0000\u0000vw\u0005F\u0000\u0000w"+
		"x\u0005e\u0000\u0000x\u0098\u0005b\u0000\u0000yz\u0005M\u0000\u0000z{"+
		"\u0005\u00e4\u0000\u0000{\u0098\u0005r\u0000\u0000|}\u0005A\u0000\u0000"+
		"}~\u0005p\u0000\u0000~\u0098\u0005r\u0000\u0000\u007f\u0080\u0005M\u0000"+
		"\u0000\u0080\u0081\u0005a\u0000\u0000\u0081\u0098\u0005i\u0000\u0000\u0082"+
		"\u0083\u0005J\u0000\u0000\u0083\u0084\u0005u\u0000\u0000\u0084\u0098\u0005"+
		"n\u0000\u0000\u0085\u0086\u0005J\u0000\u0000\u0086\u0087\u0005u\u0000"+
		"\u0000\u0087\u0098\u0005l\u0000\u0000\u0088\u0089\u0005A\u0000\u0000\u0089"+
		"\u008a\u0005u\u0000\u0000\u008a\u0098\u0005g\u0000\u0000\u008b\u008c\u0005"+
		"S\u0000\u0000\u008c\u008d\u0005e\u0000\u0000\u008d\u0098\u0005p\u0000"+
		"\u0000\u008e\u008f\u0005O\u0000\u0000\u008f\u0090\u0005k\u0000\u0000\u0090"+
		"\u0098\u0005t\u0000\u0000\u0091\u0092\u0005N\u0000\u0000\u0092\u0093\u0005"+
		"o\u0000\u0000\u0093\u0098\u0005v\u0000\u0000\u0094\u0095\u0005D\u0000"+
		"\u0000\u0095\u0096\u0005e\u0000\u0000\u0096\u0098\u0005z\u0000\u0000\u0097"+
		"s\u0001\u0000\u0000\u0000\u0097v\u0001\u0000\u0000\u0000\u0097y\u0001"+
		"\u0000\u0000\u0000\u0097|\u0001\u0000\u0000\u0000\u0097\u007f\u0001\u0000"+
		"\u0000\u0000\u0097\u0082\u0001\u0000\u0000\u0000\u0097\u0085\u0001\u0000"+
		"\u0000\u0000\u0097\u0088\u0001\u0000\u0000\u0000\u0097\u008b\u0001\u0000"+
		"\u0000\u0000\u0097\u008e\u0001\u0000\u0000\u0000\u0097\u0091\u0001\u0000"+
		"\u0000\u0000\u0097\u0094\u0001\u0000\u0000\u0000\u0098\u009a\u0001\u0000"+
		"\u0000\u0000\u0099\u009b\u0005,\u0000\u0000\u009a\u0099\u0001\u0000\u0000"+
		"\u0000\u009a\u009b\u0001\u0000\u0000\u0000\u009b\u0010\u0001\u0000\u0000"+
		"\u0000\u009c\u009d\u0007\u0005\u0000\u0000\u009d\u0012\u0001\u0000\u0000"+
		"\u0000\u009e\u00a0\u0007\u0006\u0000\u0000\u009f\u009e\u0001\u0000\u0000"+
		"\u0000\u00a0\u00a1\u0001\u0000\u0000\u0000\u00a1\u009f\u0001\u0000\u0000"+
		"\u0000\u00a1\u00a2\u0001\u0000\u0000\u0000\u00a2\u0014\u0001\u0000\u0000"+
		"\u0000\u00a3\u00a5\u0007\u0007\u0000\u0000\u00a4\u00a3\u0001\u0000\u0000"+
		"\u0000\u00a5\u00a6\u0001\u0000\u0000\u0000\u00a6\u00a4\u0001\u0000\u0000"+
		"\u0000\u00a6\u00a7\u0001\u0000\u0000\u0000\u00a7\u00a8\u0001\u0000\u0000"+
		"\u0000\u00a8\u00a9\u0006\n\u0000\u0000\u00a9\u0016\u0001\u0000\u0000\u0000"+
		"\u000e\u0000\u001b).CWY\\en\u0097\u009a\u00a1\u00a6\u0001\u0000\u0001"+
		"\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}