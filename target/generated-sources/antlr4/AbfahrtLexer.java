// Generated from AbfahrtLexer.g4 by ANTLR 4.13.2

package org.example.aufgabe1;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class AbfahrtLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		TIME=1, BUS=2, TRAIN=3, VEHICLENUMBER=4, SHIP=5, TO=6, DAYS=7, EXCEPT=8, 
		DAY=9, MONTH=10, UNTIL=11, SEPERATOR=12, TARGET=13, WS=14;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"TIME", "BUS", "TRAIN", "VEHICLENUMBER", "SHIP", "TO", "DAYS", "EXCEPT", 
			"DAY", "MONTH", "UNTIL", "SEPERATOR", "TARGET", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'Bus'", "'RE'", null, "'KAT'", "'nach'", null, "'nicht'", 
			null, null, "'-'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "TIME", "BUS", "TRAIN", "VEHICLENUMBER", "SHIP", "TO", "DAYS", 
			"EXCEPT", "DAY", "MONTH", "UNTIL", "SEPERATOR", "TARGET", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public AbfahrtLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "AbfahrtLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u000e\u00ad\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0003\u0000\"\b\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0004\u00030\b\u0003"+
		"\u000b\u0003\f\u00031\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0003\u0006K\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0003\u0006\\\b\u0006\u0003\u0006^\b\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006g\b"+
		"\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\b\u0003\bp\b\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u0099\b\t\u0001"+
		"\t\u0003\t\u009c\b\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0004"+
		"\f\u00a3\b\f\u000b\f\f\f\u00a4\u0001\r\u0004\r\u00a8\b\r\u000b\r\f\r\u00a9"+
		"\u0001\r\u0001\r\u0000\u0000\u000e\u0001\u0001\u0003\u0002\u0005\u0003"+
		"\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015"+
		"\u000b\u0017\f\u0019\r\u001b\u000e\u0001\u0000\b\u0001\u000001\u0001\u0000"+
		"09\u0001\u000022\u0001\u000005\u0001\u000003\u0002\u0000,,;;\f\u0000("+
		"),,//AZaz\u00c4\u00c4\u00d6\u00d6\u00dc\u00dc\u00df\u00df\u00e4\u00e4"+
		"\u00f6\u00f6\u00fc\u00fc\u0003\u0000\t\n\r\r  \u00cb\u0000\u0001\u0001"+
		"\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001"+
		"\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000"+
		"\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000"+
		"\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000"+
		"\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000"+
		"\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000"+
		"\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0001!\u0001\u0000\u0000\u0000"+
		"\u0003\'\u0001\u0000\u0000\u0000\u0005+\u0001\u0000\u0000\u0000\u0007"+
		"/\u0001\u0000\u0000\u0000\t3\u0001\u0000\u0000\u0000\u000b7\u0001\u0000"+
		"\u0000\u0000\rf\u0001\u0000\u0000\u0000\u000fh\u0001\u0000\u0000\u0000"+
		"\u0011o\u0001\u0000\u0000\u0000\u0013\u0098\u0001\u0000\u0000\u0000\u0015"+
		"\u009d\u0001\u0000\u0000\u0000\u0017\u009f\u0001\u0000\u0000\u0000\u0019"+
		"\u00a2\u0001\u0000\u0000\u0000\u001b\u00a7\u0001\u0000\u0000\u0000\u001d"+
		"\u001e\u0007\u0000\u0000\u0000\u001e\"\u0007\u0001\u0000\u0000\u001f "+
		"\u0007\u0002\u0000\u0000 \"\u0007\u0001\u0000\u0000!\u001d\u0001\u0000"+
		"\u0000\u0000!\u001f\u0001\u0000\u0000\u0000\"#\u0001\u0000\u0000\u0000"+
		"#$\u0005:\u0000\u0000$%\u0007\u0003\u0000\u0000%&\u0007\u0001\u0000\u0000"+
		"&\u0002\u0001\u0000\u0000\u0000\'(\u0005B\u0000\u0000()\u0005u\u0000\u0000"+
		")*\u0005s\u0000\u0000*\u0004\u0001\u0000\u0000\u0000+,\u0005R\u0000\u0000"+
		",-\u0005E\u0000\u0000-\u0006\u0001\u0000\u0000\u0000.0\u0007\u0001\u0000"+
		"\u0000/.\u0001\u0000\u0000\u000001\u0001\u0000\u0000\u00001/\u0001\u0000"+
		"\u0000\u000012\u0001\u0000\u0000\u00002\b\u0001\u0000\u0000\u000034\u0005"+
		"K\u0000\u000045\u0005A\u0000\u000056\u0005T\u0000\u00006\n\u0001\u0000"+
		"\u0000\u000078\u0005n\u0000\u000089\u0005a\u0000\u00009:\u0005c\u0000"+
		"\u0000:;\u0005h\u0000\u0000;\f\u0001\u0000\u0000\u0000<=\u0005M\u0000"+
		"\u0000=K\u0005o\u0000\u0000>?\u0005D\u0000\u0000?K\u0005i\u0000\u0000"+
		"@A\u0005M\u0000\u0000AK\u0005i\u0000\u0000BC\u0005D\u0000\u0000CK\u0005"+
		"o\u0000\u0000DE\u0005F\u0000\u0000EK\u0005r\u0000\u0000FG\u0005S\u0000"+
		"\u0000GK\u0005a\u0000\u0000HI\u0005S\u0000\u0000IK\u0005o\u0000\u0000"+
		"J<\u0001\u0000\u0000\u0000J>\u0001\u0000\u0000\u0000J@\u0001\u0000\u0000"+
		"\u0000JB\u0001\u0000\u0000\u0000JD\u0001\u0000\u0000\u0000JF\u0001\u0000"+
		"\u0000\u0000JH\u0001\u0000\u0000\u0000K]\u0001\u0000\u0000\u0000L[\u0005"+
		"-\u0000\u0000MN\u0005M\u0000\u0000N\\\u0005o\u0000\u0000OP\u0005D\u0000"+
		"\u0000P\\\u0005i\u0000\u0000QR\u0005M\u0000\u0000R\\\u0005i\u0000\u0000"+
		"ST\u0005D\u0000\u0000T\\\u0005o\u0000\u0000UV\u0005F\u0000\u0000V\\\u0005"+
		"r\u0000\u0000WX\u0005S\u0000\u0000X\\\u0005a\u0000\u0000YZ\u0005S\u0000"+
		"\u0000Z\\\u0005o\u0000\u0000[M\u0001\u0000\u0000\u0000[O\u0001\u0000\u0000"+
		"\u0000[Q\u0001\u0000\u0000\u0000[S\u0001\u0000\u0000\u0000[U\u0001\u0000"+
		"\u0000\u0000[W\u0001\u0000\u0000\u0000[Y\u0001\u0000\u0000\u0000\\^\u0001"+
		"\u0000\u0000\u0000]L\u0001\u0000\u0000\u0000]^\u0001\u0000\u0000\u0000"+
		"^g\u0001\u0000\u0000\u0000_`\u0005t\u0000\u0000`a\u0005\u00e4\u0000\u0000"+
		"ab\u0005g\u0000\u0000bc\u0005l\u0000\u0000cd\u0005i\u0000\u0000de\u0005"+
		"c\u0000\u0000eg\u0005h\u0000\u0000fJ\u0001\u0000\u0000\u0000f_\u0001\u0000"+
		"\u0000\u0000g\u000e\u0001\u0000\u0000\u0000hi\u0005n\u0000\u0000ij\u0005"+
		"i\u0000\u0000jk\u0005c\u0000\u0000kl\u0005h\u0000\u0000lm\u0005t\u0000"+
		"\u0000m\u0010\u0001\u0000\u0000\u0000np\u0007\u0004\u0000\u0000on\u0001"+
		"\u0000\u0000\u0000op\u0001\u0000\u0000\u0000pq\u0001\u0000\u0000\u0000"+
		"qr\u0007\u0001\u0000\u0000rs\u0005.\u0000\u0000s\u0012\u0001\u0000\u0000"+
		"\u0000tu\u0005J\u0000\u0000uv\u0005a\u0000\u0000v\u0099\u0005n\u0000\u0000"+
		"wx\u0005F\u0000\u0000xy\u0005e\u0000\u0000y\u0099\u0005b\u0000\u0000z"+
		"{\u0005M\u0000\u0000{|\u0005\u00e4\u0000\u0000|\u0099\u0005r\u0000\u0000"+
		"}~\u0005A\u0000\u0000~\u007f\u0005p\u0000\u0000\u007f\u0099\u0005r\u0000"+
		"\u0000\u0080\u0081\u0005M\u0000\u0000\u0081\u0082\u0005a\u0000\u0000\u0082"+
		"\u0099\u0005i\u0000\u0000\u0083\u0084\u0005J\u0000\u0000\u0084\u0085\u0005"+
		"u\u0000\u0000\u0085\u0099\u0005n\u0000\u0000\u0086\u0087\u0005J\u0000"+
		"\u0000\u0087\u0088\u0005u\u0000\u0000\u0088\u0099\u0005l\u0000\u0000\u0089"+
		"\u008a\u0005A\u0000\u0000\u008a\u008b\u0005u\u0000\u0000\u008b\u0099\u0005"+
		"g\u0000\u0000\u008c\u008d\u0005S\u0000\u0000\u008d\u008e\u0005e\u0000"+
		"\u0000\u008e\u0099\u0005p\u0000\u0000\u008f\u0090\u0005O\u0000\u0000\u0090"+
		"\u0091\u0005k\u0000\u0000\u0091\u0099\u0005t\u0000\u0000\u0092\u0093\u0005"+
		"N\u0000\u0000\u0093\u0094\u0005o\u0000\u0000\u0094\u0099\u0005v\u0000"+
		"\u0000\u0095\u0096\u0005D\u0000\u0000\u0096\u0097\u0005e\u0000\u0000\u0097"+
		"\u0099\u0005z\u0000\u0000\u0098t\u0001\u0000\u0000\u0000\u0098w\u0001"+
		"\u0000\u0000\u0000\u0098z\u0001\u0000\u0000\u0000\u0098}\u0001\u0000\u0000"+
		"\u0000\u0098\u0080\u0001\u0000\u0000\u0000\u0098\u0083\u0001\u0000\u0000"+
		"\u0000\u0098\u0086\u0001\u0000\u0000\u0000\u0098\u0089\u0001\u0000\u0000"+
		"\u0000\u0098\u008c\u0001\u0000\u0000\u0000\u0098\u008f\u0001\u0000\u0000"+
		"\u0000\u0098\u0092\u0001\u0000\u0000\u0000\u0098\u0095\u0001\u0000\u0000"+
		"\u0000\u0099\u009b\u0001\u0000\u0000\u0000\u009a\u009c\u0005,\u0000\u0000"+
		"\u009b\u009a\u0001\u0000\u0000\u0000\u009b\u009c\u0001\u0000\u0000\u0000"+
		"\u009c\u0014\u0001\u0000\u0000\u0000\u009d\u009e\u0005-\u0000\u0000\u009e"+
		"\u0016\u0001\u0000\u0000\u0000\u009f\u00a0\u0007\u0005\u0000\u0000\u00a0"+
		"\u0018\u0001\u0000\u0000\u0000\u00a1\u00a3\u0007\u0006\u0000\u0000\u00a2"+
		"\u00a1\u0001\u0000\u0000\u0000\u00a3\u00a4\u0001\u0000\u0000\u0000\u00a4"+
		"\u00a2\u0001\u0000\u0000\u0000\u00a4\u00a5\u0001\u0000\u0000\u0000\u00a5"+
		"\u001a\u0001\u0000\u0000\u0000\u00a6\u00a8\u0007\u0007\u0000\u0000\u00a7"+
		"\u00a6\u0001\u0000\u0000\u0000\u00a8\u00a9\u0001\u0000\u0000\u0000\u00a9"+
		"\u00a7\u0001\u0000\u0000\u0000\u00a9\u00aa\u0001\u0000\u0000\u0000\u00aa"+
		"\u00ab\u0001\u0000\u0000\u0000\u00ab\u00ac\u0006\r\u0000\u0000\u00ac\u001c"+
		"\u0001\u0000\u0000\u0000\f\u0000!1J[]fo\u0098\u009b\u00a4\u00a9\u0001"+
		"\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}